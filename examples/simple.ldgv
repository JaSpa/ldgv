type End : ~unit = Unit

type SendInt : ! ~ssn = !Int. !Int. End

val send2 (c: SendInt) =
    let x = ((send c) 1) in
    let y = ((send x) 42) in
    ()

val add2 (c1: dualof SendInt) =
    let <m, c2> = recv c1 in
    let <n, c3> = recv c2 in
    (m + n)


-- This blocks indefinetly 
--val main =
--    let <a, b> = (new SendInt) in
--    let a1 = fork (send2 a) in
--    add2 b
-- while this one works (probably sth with copying the channels in forking)
val main =
    let <a, b> = (new SendInt) in
    let b1 = ((send b) 1) in
    let b2 = ((send b1) 42) in
    add2 b


-- this does not work on unbounded Chan(nel)s, because the same
-- channel is used for reading and writing, so functions may read their own
-- values. A bounded Channel (with only one element) should prevent this.
--val main = 
--     let <a, b> = (new TClient) in
--     let y = fork (lServer b) in
--     ((lClient a) 42)

type EOS : ! ~un = {'EOS}
type End : ! ~unit = Unit

type TClient : ! ~ssn =
  !( l : {'neg, 'add})
  case l of
  { 'neg : !Int. ?Int. ?EOS. End
  , 'add : !Int. !Int. ?Int. ?EOS. End
  }

type LClient : ! ~ssn =
  !{'neg}. !Int. ?Int. ?EOS. End

val lClient (d : TClient) (x : Int) : Int =
    let d1 = (send d) 'neg in
    let d2 = send d1 x in
    let <r,d3> = recv d2 in
    let <xx,zz> = recv d3 in
    r

type TServer : ! ~ssn =
  ? ( x : { 'neg, 'add })
  case x of
    { 'neg : ?Int. !Int. !EOS. End
    , 'add : ?Int. ?Int. !Int. !EOS. End
    }

val lServer (c : TServer) : End =
	let < l , c1 > = recv c in
	let < x , c2 > = recv c1 in
	case l of
	{ 'neg :
	  let c3 = send c2 (-x) in
	  send c3 'EOS
	, 'add :
	  let < y , c3 > = recv c2 in
	  let c4 = send c3 (x + y) in
	  send c4 'EOS
	}
